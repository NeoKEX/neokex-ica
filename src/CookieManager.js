import { readFileSync, writeFileSync, existsSync } from 'fs';

export default class CookieManager {
  static parseNetscapeCookies(fileContent) {
    const cookies = {};
    const lines = fileContent.split('\n');
    
    for (const line of lines) {
      let trimmedLine = line.trim();
      if (!trimmedLine) {
        continue;
      }
      
      if (trimmedLine.startsWith('#HttpOnly_')) {
        trimmedLine = trimmedLine.substring(10);
      } else if (trimmedLine.startsWith('#')) {
        continue;
      }
      
      const parts = trimmedLine.split(/\s+/);
      if (parts.length >= 7) {
        const name = parts[5].trim();
        const value = parts[6].trim();
        if (name && value) {
          cookies[name] = value;
        }
      }
    }
    
    return cookies;
  }

  static loadFromFile(filePath) {
    if (!existsSync(filePath)) {
      throw new Error(`Cookie file not found: ${filePath}`);
    }
    
    const fileContent = readFileSync(filePath, 'utf-8');
    return this.parseNetscapeCookies(fileContent);
  }

  static saveToFile(filePath, cookies, domain = '.instagram.com') {
    const lines = [
      '# Netscape HTTP Cookie File',
      '# This file was generated by neokex-ica',
      '# Edit at your own risk.',
      '',
    ];

    const now = Math.floor(Date.now() / 1000);
    const expiration = now + (365 * 24 * 60 * 60);

    for (const [name, value] of Object.entries(cookies)) {
      const line = [
        domain,
        'TRUE',
        '/',
        'TRUE',
        expiration.toString(),
        name,
        value,
      ].join('\t');
      
      lines.push(line);
    }

    writeFileSync(filePath, lines.join('\n'), 'utf-8');
  }

  static cookiesToString(cookies) {
    return Object.entries(cookies)
      .map(([key, value]) => `${key}=${value}`)
      .join('; ');
  }

  static extractFromResponse(responseHeaders) {
    const cookies = {};
    
    if (responseHeaders['set-cookie']) {
      responseHeaders['set-cookie'].forEach(cookie => {
        const [cookieStr] = cookie.split(';');
        const [name, value] = cookieStr.split('=');
        if (name && value) {
          cookies[name] = value;
        }
      });
    }
    
    return cookies;
  }
}
